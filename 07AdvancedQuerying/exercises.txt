Even though on page 238 the book says it does not matter if you put 
JOIN conditions in ON or WHERE clauses, the advantage to putting them 
in the ON clause is that it is easy to see if you missed a JOIN clause. 
It is also required in some outer join situations (LEFT or RIGHT joins).

For these exercises, use the "music" database.

1) Write a JOIN query that displays the name of each artist and the albums
they've made. Alongside the album, display the number of tracks on the album.
	(mysql:root@localhost)[music]> SELECT artist_name, album_name, COUNT(*) AS tracks
		-> FROM artist INNER JOIN album USING (artist_id)
		-> INNER JOIN track USING (artist_id, album_id)
		-> GROUP BY artist.`artist_id`, album.`album_id`;
	+---------------------------+------------------------------------------+--------+
	| artist_name               | album_name                               | tracks |
	+---------------------------+------------------------------------------+--------+
	| New Order                 | Retro - John McCready FAN                |     15 |
	| New Order                 | Substance (Disc 2)                       |     12 |
	| New Order                 | Retro - Miranda Sawyer POP               |     14 |
	| New Order                 | Retro - New Order / Bobby Gillespie LIVE |     15 |
	| New Order                 | Power, Corruption & Lies                 |      8 |
	| New Order                 | Substance 1987 (Disc 1)                  |     12 |
	| New Order                 | Brotherhood                              |     10 |
	| Nick Cave & The Bad Seeds | Let Love In                              |     10 |
	| Miles Davis               | Live Around The World                    |     11 |
	| Miles Davis               | In A Silent Way                          |      2 |
	| The Rolling Stones        | Exile On Main Street                     |     18 |
	| The Stone Roses           | Second Coming                            |     13 |
	| Kylie Minogue             | Light Years                              |     13 |
	+---------------------------+------------------------------------------+--------+
	13 rows in set (0.00 sec)

2) Repeat Question 1, but now display only those albums that have more
than 10 tracks
	(mysql:root@localhost)[music]> SELECT artist_name, album_name, COUNT(*) AS tracks
		-> FROM artist INNER JOIN album USING (artist_id)
		-> INNER JOIN track USING (artist_id, album_id)
		-> GROUP BY artist.`artist_id`, album.`album_id` HAVING tracks > 10;
	+--------------------+------------------------------------------+--------+
	| artist_name        | album_name                               | tracks |
	+--------------------+------------------------------------------+--------+
	| New Order          | Retro - John McCready FAN                |     15 |
	| New Order          | Substance (Disc 2)                       |     12 |
	| New Order          | Retro - Miranda Sawyer POP               |     14 |
	| New Order          | Retro - New Order / Bobby Gillespie LIVE |     15 |
	| New Order          | Substance 1987 (Disc 1)                  |     12 |
	| Miles Davis        | Live Around The World                    |     11 |
	| The Rolling Stones | Exile On Main Street                     |     18 |
	| The Stone Roses    | Second Coming                            |     13 |
	| Kylie Minogue      | Light Years                              |     13 |
	+--------------------+------------------------------------------+--------+
	9 rows in set (0.00 sec)

3) Repeat Question 1, but write it as a nested query.

4) What are the four types of nested queries? For each type, write a sample
query on the music database. Try to use different keywords in each query,
selecting from ANY, ALL, EXISTS (or NOT EXISTS) and IN (or NOT IN).
	- ANY - return TRUE if the comparison is TRUE for ANY of the values in the column that the subquery returns.  
		- Can also use SOME, or =ANY is synonomous with IN
				(mysql:root@localhost)[music]> SELECT artist_name FROM artist
					-> WHERE artist_id = ANY (SELECT artist_id FROM track GROUP BY artist_id, album_id HAVING COUNT(track_id) BETWEEN 10 AND 13);
				+---------------------------+
				| artist_name               |
				+---------------------------+
				| New Order                 |
				| Nick Cave & The Bad Seeds |
				| Miles Davis               |
				| The Stone Roses           |
				| Kylie Minogue             |
				+---------------------------+
				5 rows in set (0.00 sec)
	- ALL - return TRUE if the comparison is TRUE for ALL of the values in the column that the subquery returns.
	- EXISTS/NOT EXISTS - If a subquery returns any rows at all, EXISTS subquery is TRUE, and NOT EXISTS subquery is FALSE.
	- IN/NOT IN

5) What is the difference between an INNER JOIN, a LEFT JOIN, and a RIGHT
JOIN? Does the the order of tables matter in an INNER JOIN? Why or why not?
	 - INNER JOIN - return rows that match between tables
			- Order of tables does not matter, since dependant on matching rows in both
	 - LEFT JOIN - rows in the left table are returned; matched to the data in the second table if exists, NULL if no match
	 - RIGHT JOIN - same as left, but returns the rows on the right table, matches to data in the left table if exists, NULL if no match

6) Why do these queries give different results? What does this tell you
about using join conditions in the ON clause versus in the WHERE clause
for LEFT (and RIGHT) JOINs?

SELECT track_name, track.album_id, COUNT(played)
FROM track
LEFT JOIN played ON (track.track_id=played.track_id
AND track.album_id=played.album_id)
WHERE track.artist_id=3
GROUP BY track_name, track.album_id;

SELECT track_name, track.album_id, COUNT(played)
FROM track
LEFT JOIN played ON (track.album_id=played.album_id)
WHERE track.track_id=played.track_id
AND track.artist_id=3
GROUP BY track_name, track.album_id;
